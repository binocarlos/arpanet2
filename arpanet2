#!/bin/bash

# change ambassadord to progrium when updated
export CONSUL_IMAGE=${CONSUL_IMAGE:="progrium/consul"}

# wait for https://github.com/zettio/weave/pull/70 to be merged
export WEAVE_URL=${WEAVE_URL:="https://raw.githubusercontent.com/zettio/weave/master/weaver/weave"}
export CONSUL_URL=${CONSUL_URL:="https://dl.bintray.com/mitchellh/consul/0.3.1_linux_amd64.zip"}
export DOCKER_PORT=${DOCKER_PORT:=2375}
export CONSUL_EXPECT=${CONSUL_EXPECT:=3}
export CONSUL_DATA=${CONSUL_DATA:=/mnt/arpanet-consul}
export CONSUL_KV_PATH=${CONSUL_KV_PATH:=/arpanet2}

DOCKER_BRIDGE=`ip addr | awk '/inet/ && /docker0/{sub(/\/.*$/,"",$2); print $2}'`

check-root(){
	[ `id -u` = 0 ] || {
    echo "arpanet2 $1 must be run as 'root'" >&2
    exit 1
	}
}

usage() {
cat <<EOF
Usage:
arpanet2 install
arpanet2 boot <address> <password> [CONSUL_OPTS...]
arpanet2 join:<mode> <address> <password> <join-address> <join-ip> [CONSUL_OPTS...]
arpanet2 stop
arpanet2 kv <command> [OPTIONS...]
arpanet2 consul <command> [OPTIONS...]
arpanet2 help
EOF
	exit 1
}

cmd-install() {
	check-root install
	apt-get install -y ethtool conntrack unzip
	wget -O /usr/local/bin/weave $WEAVE_URL
	chmod a+x /usr/local/bin/weave
	mkdir -p $CONSUL_DATA
	wget -O /tmp/consul.zip $CONSUL_URL
	cd /bin && unzip -o /tmp/consul.zip && chmod +x /bin/consul && rm /tmp/consul.zip
}

configure-network() {
	local arpaaddress="$1"; shift
	local password="$1"; shift
	local joinip="$1"; shift
	local joinaddress="$1"; shift
	echo $arpaaddress > /var/run/arpanet2.address
	weave expose "10.254.$arpaaddress/8"
	weave expose "10.253.$arpaaddress/8"
	echo "DOCKER_OPTS='-H unix:///var/run/docker.sock -H tcp://10.254.$arpaaddress:$DOCKER_PORT --dns $DOCKER_BRIDGE --dns 8.8.8.8 --dns-search service.consul'" > /etc/default/docker
	service docker restart
	echo "docker configuring consul DNS"
	sleep 2
	weave launch "10.255.$arpaaddress/8" -password $password $joinip
	echo "weave configuring network: 10.255.$arpaaddress/8"
	sleep 5
	if [[ -n "$joinaddress" ]]; then
		echo "ensuring weave route to $joinaddress"
		ping -c 20 "10.253.$joinaddress"
	fi
}

cmd-boot() {
	check-root boot
	[ $# -gt 1 ] || usage
	local arpaaddress="$1"; shift
	local password="$1"; shift
	configure-network $arpaaddress $password
	start-consul boot $arpaaddress $@
}

cmd-join() {
	check-root join
	[ $# -gt 3 ] || usage
	local mode="$1"; shift
	local arpaaddress="$1"; shift
	local password="$1"; shift
	local joinip="$1"; shift
	local joinaddress="$1"; shift
	configure-network $arpaaddress $password $joinip $joinaddress
	start-consul $mode $arpaaddress $joinaddress $@
}

cmd-stop() {
	check-root stop
	if [ -f /var/run/arpanet2.address ]; then
		weave hide 10.254.`cat /var/run/arpanet2.address`/8
		weave hide 10.253.`cat /var/run/arpanet2.address`/8
	fi
	if [ -f /var/run/consul.pid ]; then
		kill -SIGINT `cat /var/run/consul.pid`
	fi
	weave stop
}

start-consul(){
	local mode="$1"; shift
	local arpaaddress="$1"; shift
	local joinaddress="$1"; shift

	local fullarpaaddress="10.253.$arpaaddress"
	local fulljoinaddress="10.253.$joinaddress"

	bridge_ip=$(ip ro | awk '/^default/{print $3}')
	consul_args=""

	if [[ "$mode" == "boot" ]]; then
		consul_args="-server -bootstrap-expect $CONSUL_EXPECT"
	elif [[ "$mode" == "server" ]]; then
		consul_args="-server -join $fulljoinaddress"
	elif [[ "$mode" == "client" ]]; then
		consul_args="-join $fulljoinaddress"
	else
		>&2 echo "unknown mode: $mode"
		exit 1
	fi

	mkdir -p /etc/consul

cat << EOF > /etc/consul/consul.json
{
	"addresses":{
		"dns":"$DOCKER_BRIDGE"
	},
	"ports": {
		"dns": 53
	},
	"recursor": "8.8.8.8"
}
EOF

	consul agent \
		-config-dir=/etc/consul \
		-pid-file /var/run/consul.pid \
		-client 127.0.0.1 \
		-advertise $fullarpaaddress \
		-bind $fullarpaaddress \
		-syslog \
		-pid-file /var/run/consul.pid \
		-data-dir $CONSUL_DATA \
		$consul_args
}

cmd-consul() {
	local cmd="$1"; shift
	local consul_http_endpoint="-http-addr $ARPANET_IP:$CONSUL_HTTP_PORT"
	local consul_rpc_endpoint="-rpc-addr $ARPANET_IP:$CONSUL_RPC_PORT"
	local consul_endpoint=$consul_rpc_endpoint

	if [[ "$cmd" == "" ]]; then
		>&2 echo "usage: arpanet consul <command>"
		exit 1
	elif [[ "$cmd" == "event" ]]; then
		consul_endpoint="$consul_http_endpoint"
	elif [[ "$cmd" == "exec" ]]; then
		consul_endpoint="$consul_http_endpoint"
	elif [[ "$cmd" == "watch" ]]; then
		consul_endpoint="$consul_http_endpoint"
	elif [[ "$cmd" == "keygen" ]]; then
		consul_endpoint=""
	fi

	docker run -t --rm --entrypoint "/bin/consul" $CONSUL_IMAGE $cmd $consul_endpoint $@
}

cmd-kv() {
	check-environment
	local consul_endpoint="$ARPANET_IP:$CONSUL_HTTP_PORT"
	local path="$consul_endpoint/v1/kv/$2"
	path=`echo $path | sed 's/\/\/*/\//g'`
	path=`echo $path | sed 's/\/$//'`
	case "$1" in
		info)
			curl -s "$path" | jq -r .[]
			;;
		get)
			curl -s "$path" | jq -r .[].Value | base64 -d
			# we are using a different base64 binary and so this sed not needed
			# | sed 's/$/\n/'
			;;
		set)
			curl -s -X PUT -d "$3" "$path" > /dev/null
			;;
		del)
			curl -s -X DELETE "$path" > /dev/null
			;;
		ls)
			if [[ "$2" == "" ]]; then
				curl -s "$path/?keys" | jq -r .[]
			else
				curl -s "$path/?keys" | jq -r .[] | sed "s|$2/||"
			fi
			;;
		*)
			if [[ -z "$1" ]]; then
				>&2 echo "usage: consul kv <command>"
			else
				>&2 echo "unknown command $1"
			fi
			;;
	esac
}



main() {
	case "$1" in
	install)					  shift; cmd-install; $@;;
	boot)               shift; cmd-boot $@;;
  join:server)        shift; cmd-join server $@;;
  join:client)        shift; cmd-join client $@;;
	stop)               shift; cmd-stop $@;;
	kv)                 shift; cmd-kv $@;;
  consul:boot)	  		shift; cmd-consulboot; $@;;
	consul)							shift; cmd-consul $@;;
	*)                  cmd-help $@;;
	esac
}

main "$@"
