#!/bin/bash

export WEAVE_URL=${WEAVE_URL:="https://raw.githubusercontent.com/zettio/weave/master/weaver/weave"}
export DOCKER_PORT=${DOCKER_PORT:=2375}
export CONSUL_URL=${CONSUL_URL:="https://dl.bintray.com/mitchellh/consul/0.4.0_linux_amd64.zip"}
export CONSUL_EXPECT=${CONSUL_EXPECT:=3}
export CONSUL_LOG=${CONSUL_LOG:=/var/log/consul.log}
export CONSUL_DATA=${CONSUL_DATA:=/mnt/arpanet-consul}
export CONSUL_KV_PATH=${CONSUL_KV_PATH:=/arpanet2}
export CONSUL_PID=${CONSUL_PID:=/var/run/consul.pid}
export CONSUL_DEAMON=${CONSUL_DEAMON:=""}
export CONSUL_HTTP_PORT=${CONSUL_HTTP_PORT:=8500}
export CONSUL_RPC_PORT=${CONSUL_RPC_PORT:=8400}
export ARPANET2_ADDRESS=${ARPANET2_ADDRESS:=/var/run/arpanet2.address}

DOCKER_BRIDGE=`ip addr | awk '/inet/ && /docker0/{sub(/\/.*$/,"",$2); print $2}'`

if [[ -z "$DOCKER_BRIDGE" ]]; then
	echo "DOCKER_BRIDGE is not found - is docker running?" >&2
	exit 1
fi

check-root(){
	[ `id -u` = 0 ] || {
    echo "arpanet2 $1 must be run as 'root'" >&2
    exit 1
	}
}

usage() {
cat <<EOF
Usage:
arpanet2 install
arpanet2 boot <ipaddr>/<subnet> <password> [CONSUL_OPTS...]
arpanet2 join:<mode> <ipaddr>/<subnet> <password> <join-weave> <join-ip> [CONSUL_OPTS...]
arpanet2 stop
arpanet2 reset
arpanet2 info
arpanet2 kv <command> [OPTIONS...]
arpanet2 consul <command> [OPTIONS...]
arpanet2 help
EOF
	exit 1
}

ip-from-cidr() {
	echo $1 | sed -e 's/\/[0-9]*$//g'
}

subnet-from-cidr() {
	echo $1 | sed -e 's/^[0-9\.]*\///g'
}

# wait for weave to have established a route before consul kicks in
# we do this by pinging until we get a response (with sanity of 20 times repeat)
# this could be done better I'm sure
ensure-connection() {
	local joinweave="$1"; shift
	local pingcount=0
	local hit=0
	local result=""
	while [[ $pingcount -lt 20 && $hit -le 0 ]]; do
		pingcount=$((pingcount+1))
		echo "ping #$pingcount -> $joinweave"
		result=`ping -c 1 $joinweave`
		if [[ $result == *"1 received"* ]];
		then
		  hit=1
		fi
	done
	if [[ $hit -le 0 ]]; then
		>&2 echo "20 ping attempts to $joinweave failed"
		exit 1
	fi
}

# download weave deps, weave + consul
cmd-install() {
	check-root install
	apt-get install -y ethtool conntrack unzip
	wget -O /usr/local/bin/weave $WEAVE_URL
	chmod a+x /usr/local/bin/weave
	mkdir -p $CONSUL_DATA
	wget -O /tmp/consul.zip $CONSUL_URL
	cd /bin && unzip -o /tmp/consul.zip && chmod +x /bin/consul && rm /tmp/consul.zip
}

configure-docker() {
	local weaveaddress="$1"; shift
	local opts=""
	if [[ -n "$weaveaddress" ]]; then
		echo "enabling docker consul DNS and binding docker to weave bridge"
		echo "DOCKER_OPTS='-H unix:///var/run/docker.sock -H tcp://$weaveip:$DOCKER_PORT --dns $DOCKER_BRIDGE --dns 8.8.8.8 --dns-search service.consul'" > /etc/default/docker
	else
		echo "disabling docker consul DNS and removing docker from weave bridge"
		echo "DOCKER_OPTS='-H unix:///var/run/docker.sock'" > /etc/default/docker
	fi
	service docker restart
	sleep 2
}

# write our arpanet address to /var/run/arpanet2.address
# expose the IP used to start weave
# tell docker to listen on that IP + the UNIX socket
# if we are joining another weave - wait for the route to establish
configure-network() {
	local weaveaddress="$1"; shift
	local password="$1"; shift
	local joinip="$1"; shift
	local joinweave="$1"; shift
	local weaveip=$(ip-from-cidr $weaveaddress)

	echo $weaveaddress > $ARPANET2_ADDRESS
	weave expose $weaveaddress
	configure-docker $weaveaddress
	weave launch $weaveaddress -password $password $joinip
	#weave launch $weaveaddress $joinip
	echo "weave configuring network: $weaveaddress"
	sleep 2
	if [[ -n "$joinweave" ]]; then
		echo "ensuring weave route to $joinweave"
		ensure-connection $joinweave
	fi
}

# setup network then start consul
cmd-boot() {
	check-root boot
	[ $# -gt 1 ] || usage
	local weaveaddress="$1"; shift
	local password="$1"; shift
	configure-network $weaveaddress $password
	start-consul boot $weaveaddress $@
}

# setup network then start consul
cmd-join() {
	check-root join
	[ $# -gt 3 ] || usage
	local mode="$1"; shift
	local weaveaddress="$1"; shift
	local password="$1"; shift
	local joinip="$1"; shift
	local joinweave="$1"; shift
	configure-network $weaveaddress $password $joinip $joinweave
	start-consul $mode $weaveaddress $joinweave $@
}

# hide the exposed address
# stop consul
# stop weave
cmd-stop() {
	check-root stop
	consul leave
	weave stop
	configure-docker
	if [ -f $ARPANET2_ADDRESS ]; then
		weave hide `cat $ARPANET2_ADDRESS`
		rm -f $ARPANET2_ADDRESS
	fi
	if [ -f $CONSUL_PID ]; then
		kill -SIGINT `cat $CONSUL_PID`
	fi
}

# remove the data
cmd-reset() {
	if [ -f $CONSUL_PID ]; then
		>&2 echo "consul is still running"
		exit 1
	fi
	rm -rf $CONSUL_DATA/*
	rm -f /var/log/consul.log
}

cmd-info() {
	if [ -f $ARPANET2_ADDRESS ]; then
		echo "address: "`cat $ARPANET2_ADDRESS`
	fi
	echo "bridge: $DOCKER_BRIDGE"
}

# work out what options for boot, server and client mode
# ensure data folder
# create config file with non-cli options
# run consul with &
# if consul args 
start-consul(){
	local mode="$1"; shift
	local weaveaddress="$1"; shift
	local joinweave="$1"; shift
	local weaveip=$(ip-from-cidr $weaveaddress)

	consul_args=""

	if [[ "$mode" == "boot" ]]; then
		consul_args="-server -bootstrap-expect $CONSUL_EXPECT"
	elif [[ "$mode" == "server" ]]; then
		consul_args="-server -join $joinweave"
	elif [[ "$mode" == "client" ]]; then
		consul_args="-join $joinweave"
	else
		>&2 echo "unknown mode: $mode"
		exit 1
	fi

	mkdir -p /etc/consul

cat << EOF > /etc/consul/consul.json
{
	"recursor": "8.8.8.8",
	"ports": {
		"dns": 53
	}
}
EOF

	setsid consul agent \
		-config-dir /etc/consul \
		-pid-file $CONSUL_PID \
		-client $DOCKER_BRIDGE \
		-advertise $weaveip \
		-bind $weaveip \
		-pid-file $CONSUL_PID \
		-data-dir $CONSUL_DATA \
		$consul_args >$CONSUL_LOG 2>&1 < /dev/null &

	if [[ $CONSUL_DEAMON ]]; then
		echo "consul started: "`cat $CONSUL_PID`
	else
		touch $CONSUL_LOG
		tail -f $CONSUL_LOG
	fi
}

cmd-consul() {
	local cmd="$1"; shift

	local http_endpoint="-http-addr $DOCKER_BRIDGE:$CONSUL_HTTP_PORT"
	local rpc_endpoint="-rpc-addr $DOCKER_BRIDGE:$CONSUL_RPC_PORT"
	local use_endpoint=$rpc_endpoint

	if [[ "$cmd" == "" ]]; then
		>&2 echo "usage: arpanet consul <command>"
		exit 1
	elif [[ "$cmd" == "event" ]]; then
		use_endpoint="$http_endpoint"
	elif [[ "$cmd" == "exec" ]]; then
		use_endpoint="$http_endpoint"
	elif [[ "$cmd" == "watch" ]]; then
		use_endpoint="$rpc_endpoint"
	elif [[ "$cmd" == "keygen" ]]; then
		use_endpoint=""
	fi

	consul $cmd $use_endpoint $@
}

cmd-kv() {
	check-environment
	local consul_endpoint="$ARPANET_IP:$CONSUL_HTTP_PORT"
	local path="$consul_endpoint/v1/kv/$2"
	path=`echo $path | sed 's/\/\/*/\//g'`
	path=`echo $path | sed 's/\/$//'`
	case "$1" in
		info)
			curl -s "$path" | jq -r .[]
			;;
		get)
			curl -s "$path" | jq -r .[].Value | base64 -d
			# we are using a different base64 binary and so this sed not needed
			# | sed 's/$/\n/'
			;;
		set)
			curl -s -X PUT -d "$3" "$path" > /dev/null
			;;
		del)
			curl -s -X DELETE "$path" > /dev/null
			;;
		ls)
			if [[ "$2" == "" ]]; then
				curl -s "$path/?keys" | jq -r .[]
			else
				curl -s "$path/?keys" | jq -r .[] | sed "s|$2/||"
			fi
			;;
		*)
			if [[ -z "$1" ]]; then
				>&2 echo "usage: consul kv <command>"
			else
				>&2 echo "unknown command $1"
			fi
			;;
	esac
}



main() {
	case "$1" in
	install)					  shift; cmd-install; $@;;
	boot)               shift; cmd-boot $@;;
	join:server)        shift; cmd-join server $@;;
	join:client)        shift; cmd-join client $@;;
	stop)               shift; cmd-stop $@;;
	info)               shift; cmd-info $@;;
  reset)              shift; cmd-reset $@;;
	kv)                 shift; cmd-kv $@;;
	consul)							shift; cmd-consul $@;;
	*)                  usage $@;;
	esac
}

main "$@"
